
Store => Will hold all of our application data/state 🎖️
Reducer => A function who returns a specific amount of state or data
Action => Events occurs => { type:"Must something"}
Dispatch 
Subscriber



==================*****===================


1. create a Reducer
2. create store with the help of Reducer
3. Now we can Subscribe
4. Dispatch(Action)


 Understanding =>
 /**
   * State ,Action
   * A reducer function must have two parameters
   * @param {object} state
   * @param {} action
   * @returns state
   */
  const reducer = (state = {}, action) => {
    if (action.type === "A") {
      return {
        ...state,
        A: "I am A",
      };
    }
    if (action.type === "B") {
      return {
        ...state,
        B: "I am B",
      };
    }
    return state;
  };
  // note
  const store = createStore(reducer);

  store.subscribe(() => {
    console.log(store.getState().A);
  });

  store.subscribe(() => {
    console.log(store.getState().B);
  });

  store.dispatch({ type: "some" });
  store.dispatch({ type: "B" });
  store.dispatch({ type: "some" });
  store.dispatch({ type: "A" });
  store.dispatch({ type: "some" });



** React Redux =>
/**
* React will be responsible for only view layer
* Redux will be responsible for only Data layer
* React-Redux 
*/
